import React from 'react';
import { Document, Page, Text, View, StyleSheet, Image, Font } from '@react-pdf/renderer';

// Register Unicode-compatible fonts (supports Polish and other special characters)
Font.register({
  family: 'Roboto',
  fonts: [
    {
      src: 'https://fonts.gstatic.com/s/roboto/v30/KFOmCnqEu92Fr1Me5WZLCzYlKw.ttf',
      fontWeight: 'normal',
    },
    {
      src: 'https://fonts.gstatic.com/s/roboto/v30/KFOlCnqEu92Fr1MmWUlvAx05IsDqlA.ttf',
      fontWeight: 'bold',
    },
  ],
});

// Define styles for the PDF
const styles = StyleSheet.create({
  page: {
    padding: 40,
    fontSize: 10,
    fontFamily: 'Roboto',
    backgroundColor: '#ffffff',
  },
  header: {
    marginBottom: 15,
    textAlign: 'center',
  },
  title: {
    fontSize: 26,
    fontWeight: 'bold',
    color: '#1e40af',
    marginBottom: 5,
  },
  image: {
    width: '100%',
    height: 180,
    objectFit: 'cover',
    marginBottom: 18,
    borderRadius: 4,
  },
  daySection: {
    marginBottom: 18,
  },
  dayHeader: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#1e40af',
    marginBottom: 8,
    marginTop: 8,
    paddingBottom: 4,
    borderBottomWidth: 2,
    borderBottomColor: '#3b82f6',
  },
  placeContainer: {
    marginBottom: 10,
    paddingLeft: 8,
  },
  placeTime: {
    fontSize: 10,
    color: '#6366f1',
    fontWeight: 'bold',
    marginBottom: 3,
  },
  placeName: {
    fontSize: 12,
    fontWeight: 'bold',
    color: '#111827',
    marginBottom: 3,
  },
  placeDescription: {
    fontSize: 10,
    color: '#4b5563',
    lineHeight: 1.4,
  },
  footer: {
    position: 'absolute',
    bottom: 30,
    left: 40,
    right: 40,
    textAlign: 'center',
    color: '#9ca3af',
    fontSize: 9,
    borderTopWidth: 1,
    borderTopColor: '#e5e7eb',
    paddingTop: 10,
  },
});

interface ItineraryPDFProps {
  itinerary: {
    id: string;
    destination: string;
    days: number;
    travelers: number;
    start_date?: string | null;
    end_date?: string | null;
    children?: number | null;
    child_ages?: number[] | null;
    has_accessibility_needs?: boolean | null;
    notes?: string | null;
    tags?: string[] | null;
    ai_plan: {
      city: string;
      days: Array<{
        title: string;
        places: Array<{
          name: string;
          desc: string;
          time: string;
        }>;
      }>;
    };
    image_url?: string | null;
    creator_name?: string | null;
    created_at: string;
  };
}

export const ItineraryPDFDocument: React.FC<ItineraryPDFProps> = ({ itinerary }) => {
  const {
    destination,
    days,
    start_date,
    end_date,
    ai_plan,
    image_url,
  } = itinerary;

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-GB', {
      day: '2-digit',
      month: 'short',
      year: 'numeric',
    });
  };

  return (
    <Document>
      <Page size="A4" style={styles.page}>
        {/* Header */}
        <View style={styles.header}>
          <Text style={styles.title}>{ai_plan.city || destination}</Text>
          <Text style={{ fontSize: 11, color: '#6b7280', marginBottom: 5 }}>
            {start_date && end_date
              ? `${formatDate(start_date)} - ${formatDate(end_date)} • ${days} ${days === 1 ? 'day' : 'days'}`
              : `${days} ${days === 1 ? 'day' : 'days'}`}
          </Text>
        </View>

        {/* Destination Image (if available) */}
        {image_url && (
          // eslint-disable-next-line jsx-a11y/alt-text
          <Image
            src={image_url}
            style={styles.image}
          />
        )}

        {/* Daily Itinerary - All days flow continuously */}
        {ai_plan.days.map((day, dayIndex) => (
          <View key={dayIndex} style={styles.daySection}>
            <Text style={styles.dayHeader}>
              Day {dayIndex + 1}: {day.title}
            </Text>

            {day.places.map((place, placeIndex) => (
              <View key={placeIndex} style={styles.placeContainer}>
                <Text style={styles.placeTime}>{place.time}</Text>
                <Text style={styles.placeName}>{place.name}</Text>
                <Text style={styles.placeDescription}>{place.desc}</Text>
              </View>
            ))}
          </View>
        ))}

        {/* Footer */}
        <View style={styles.footer}>
          <Text>
            Generated by AI Travel Planner • {new Date().toLocaleDateString()}
          </Text>
        </View>
      </Page>
    </Document>
  );
};

