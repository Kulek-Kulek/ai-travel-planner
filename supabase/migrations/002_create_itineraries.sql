-- Create itineraries table
create table itineraries (
  id uuid primary key default uuid_generate_v4(),
  user_id uuid references auth.users(id) on delete cascade,
  
  -- Trip details
  destination text not null,
  days integer not null check (days > 0 and days <= 30),
  travelers integer not null check (travelers > 0 and travelers <= 20),
  notes text,
  
  -- AI-generated content
  ai_plan jsonb not null,
  tags text[] default '{}',
  
  -- Privacy
  is_private boolean default false not null,
  
  -- Timestamps
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  updated_at timestamp with time zone default timezone('utc'::text, now()) not null
);

-- Create indexes for better query performance
create index itineraries_user_id_idx on itineraries(user_id);
create index itineraries_created_at_idx on itineraries(created_at desc);
create index itineraries_tags_idx on itineraries using gin(tags);
create index itineraries_is_private_idx on itineraries(is_private);

-- Enable RLS
alter table itineraries enable row level security;

-- RLS Policies

-- 1. Public can read all non-private itineraries
create policy "Anyone can view public itineraries"
  on itineraries for select
  using (is_private = false);

-- 2. Authenticated users can read their own itineraries (including private)
create policy "Users can view own itineraries"
  on itineraries for select
  to authenticated
  using (auth.uid() = user_id);

-- 3. Anonymous users can insert public itineraries (user_id will be NULL)
create policy "Anonymous users can create public itineraries"
  on itineraries for insert
  to anon
  with check (user_id is null and is_private = false);

-- 4. Authenticated users can insert their own itineraries
create policy "Users can create own itineraries"
  on itineraries for insert
  to authenticated
  with check (auth.uid() = user_id);

-- 5. Users can update only their own itineraries
create policy "Users can update own itineraries"
  on itineraries for update
  to authenticated
  using (auth.uid() = user_id)
  with check (auth.uid() = user_id);

-- 6. Users can delete only their own itineraries
create policy "Users can delete own itineraries"
  on itineraries for delete
  to authenticated
  using (auth.uid() = user_id);

-- Create updated_at function for itineraries
create or replace function public.handle_itineraries_updated_at()
returns trigger as $$
begin
  new.updated_at = now();
  return new;
end;
$$ language plpgsql;

-- Updated_at trigger
create trigger handle_itineraries_updated_at
  before update on itineraries
  for each row execute procedure public.handle_itineraries_updated_at();

-- Add comment for documentation
comment on table itineraries is 'Stores all travel itineraries generated by AI. Anonymous users create public plans, authenticated users can create public or private plans.';
comment on column itineraries.user_id is 'NULL for anonymous users, user ID for authenticated users';
comment on column itineraries.tags is 'AI-generated tags for filtering (e.g., ["Rome", "city break", "family", "3-5 days"])';
comment on column itineraries.is_private is 'If true, only the owner can view. Always false for anonymous plans.';

